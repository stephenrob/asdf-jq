#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

plugin_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# shellcheck source=../lib/utils.bash
source "${plugin_dir}/../lib/utils.bash"

declare -r JQ_REPO="https://github.com/jqlang/jq.git"
declare -r RELEASES_URL="https://api.github.com/repos/jqlang/jq/releases"


error_exit() {
  echo "$1" >&2
  exit "${2:-1}"
}

get_platform() {
  local plat="$(uname | tr '[:upper:]' '[:lower:]')"
  if [ "$plat" == "darwin" ]; then
    echo "macos"
  else
    echo "linux"
  fi
  return
}
get_arch(){
  declare arch="$(uname -m)"
  case "$arch" in
    x86_64 | amd64) echo "amd64" ;;
    x86 | i686 | i386 | 386) echo "i386" ;;
    aarch64 | arm64) echo "arm64" ;;
    armv7l) echo "armhf" ;;
    armv6l) echo "armel" ;;
    *) error_exit "Unsupported architecture $arch" ;;
  esac
  return
}

get_assets_url() {
  declare install_version="$1"

  if [ -n "${GITHUB_API_TOKEN:+defined}" ]; then
    declare releases_json="$(curl_wrapper -LfsS "$RELEASES_URL" -H "Authorization: token $GITHUB_API_TOKEN")"
  else
    declare releases_json="$(curl_wrapper -LfsS "$RELEASES_URL")"
  fi

  declare -a asset_urls
  asset_urls=($(echo "$releases_json" | sed -n -E 's/[[:blank:]]*"assets_url":[[:blank:]]*"([^"]*)".*/\1/p'))

  declare -a tag_names
  tag_names=($(echo "$releases_json"  | sed -n -E 's/[[:blank:]]*"tag_name":[[:blank:]]*"([^"]*)".*/\1/p'))

  for i in "${!tag_names[@]}"; do
    if [ "${tag_names[$i]}" == "jq-$install_version" ]; then
      echo "${asset_urls[$i]}"
      return
    fi
  done

  error_exit  "Given version '$install_version' did not match any releases. Try list-all to see available options"
}
find_all_asset_names() {
  declare install_version="$1"

  declare assets_url="$(get_assets_url "$install_version")"
  if [ -z "$assets_url" ]; then
    error_exit "No URL found for release $install_version"
  fi

  if [ -n "${GITHUB_API_TOKEN:+defined}" ]; then
    declare assets_json="$(curl_wrapper -LfsS "$assets_url" -H "Authorization: token $GITHUB_API_TOKEN")"
  else
    declare assets_json="$(curl_wrapper -LfsS "$assets_url")"
  fi
  declare -a output=($(echo "$assets_json" | sed -n -E 's/[[:blank:]]*"browser_download_url":[[:blank:]]{0,2}"([^"]{8,})"/\1/p'))
  echo "${output[@]}"
}
filter_assets() {
  declare -a inArr=($@)

  declare platform="$(get_platform)";
  declare arch="$(get_arch)"
  declare -a filters=("${platform}-${arch}")
  declare -a filteredArr=()

  # Handle older platform-arch naming scheme
  case "${platform}-${arch}" in
    linux-amd64) filters+=(linux64 linux-x86_64) ;;
    linux-i386) filters+=(linux32 linux-x86) ;;
    macos-amd64) filters+=(osx-amd64 osx-x86_64) ;;
    macos-i386) filters+=(osx-x86) ;;
  esac

  for input in "${inArr[@]}"; do
    for filter in "${filters[@]}"; do
      if [[ "$input" == *"$filter"* ]]; then
        filteredArr+=("$input")
      fi
    done
  done
  echo "${filteredArr[@]}"
}
find_file_url() {
  declare -r install_version="$@"

  declare -r arch="$(get_arch)"
  declare -r platform="$(get_platform)"
  declare -a assets=($(find_all_asset_names "$install_version"))
  declare -a usableAssets=($(filter_assets "${assets[@]}"))

  if [ "${#usableAssets[@]}" == 0 ]; then
    error_exit "No releases in version $install_version matching $platform $arch-bits"
  elif [ "${#usableAssets[@]}" -gt 1  ]; then
    echo "Multiple releases found matching $platform $arch-bits, choosing first" >&2
  fi

  echo "${usableAssets[0]}"
}
download() {
  declare -r download_type="$1"
  declare -r download_version="$2"
  declare -r download_path="$3"

  if [ "$download_type" == "version" ]; then
    declare -r download_url="$(find_file_url "$download_version")"
    if [ -z "$download_url" ]; then
      error_exit "Malformed URL"
    fi
    mkdir -p "$download_path/bin"
    curl_wrapper -fsS -L -o "${download_path}/bin/jq" "$download_url"
  else
    rm -rf "$download_path"
    git init "$download_path"
    cd "$download_path"
    git remote add origin "$JQ_REPO"
    git fetch --depth=1 origin "$download_version"
    git reset --hard "$download_version"
  fi
}


download "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_DOWNLOAD_PATH"
#download ref 2e01ff1fb69609540b2bdc4e62a60499f2b2fb8e ~/Desktop/jqsource
